// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    '/app': RouteRecordInfo<'/app', '/', Record<never, never>, Record<never, never>>,
    '/app/[...any]': RouteRecordInfo<'/app/[...any]', '/app/:any(.*)', { any: ParamValue<true> }, { any: ParamValue<false> }>,
    '/app/@template': RouteRecordInfo<'/app/@template', '/app/@template', Record<never, never>, Record<never, never>>,
    'Accidents': RouteRecordInfo<'Accidents', '/app/accidents', Record<never, never>, Record<never, never>>,
    'Analytics': RouteRecordInfo<'Analytics', '/app/analytics', Record<never, never>, Record<never, never>>,
    'Books': RouteRecordInfo<'Books', '/app/books', Record<never, never>, Record<never, never>>,
    'Complaints': RouteRecordInfo<'Complaints', '/app/complaints', Record<never, never>, Record<never, never>>,
    'Daily Quiz': RouteRecordInfo<'Daily Quiz', '/app/daily-quiz', Record<never, never>, Record<never, never>>,
    'Dashboard': RouteRecordInfo<'Dashboard', '/app/dashboard', Record<never, never>, Record<never, never>>,
    'Drivers': RouteRecordInfo<'Drivers', '/app/drivers', Record<never, never>, Record<never, never>>,
    'driver-profile': RouteRecordInfo<'driver-profile', '/app/drivers/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'Incentives': RouteRecordInfo<'Incentives', '/app/incentives', Record<never, never>, Record<never, never>>,
    'Lessons': RouteRecordInfo<'Lessons', '/app/lessons', Record<never, never>, Record<never, never>>,
    'Members': RouteRecordInfo<'Members', '/app/members', Record<never, never>, Record<never, never>>,
    'Modules': RouteRecordInfo<'Modules', '/app/modules', Record<never, never>, Record<never, never>>,
    'Organizations': RouteRecordInfo<'Organizations', '/app/organizations', Record<never, never>, Record<never, never>>,
    'Quizzes': RouteRecordInfo<'Quizzes', '/app/quizzes', Record<never, never>, Record<never, never>>,
    'Reminders': RouteRecordInfo<'Reminders', '/app/reminders', Record<never, never>, Record<never, never>>,
    'Summary': RouteRecordInfo<'Summary', '/app/summary', Record<never, never>, Record<never, never>>,
    'Vehicles': RouteRecordInfo<'Vehicles', '/app/vehicles', Record<never, never>, Record<never, never>>,
    'Violations': RouteRecordInfo<'Violations', '/app/violations', Record<never, never>, Record<never, never>>,
    'Webinars': RouteRecordInfo<'Webinars', '/app/webinars', Record<never, never>, Record<never, never>>,
    '/login': RouteRecordInfo<'/login', '/login', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  
  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
